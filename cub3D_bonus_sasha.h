char	**add_line(char *line, char **mat);
bool	all_set(t_parse *parse);
bool	bool_fill(char **map, t_data *data, int y, int x);
void	calculate_fps(t_data *data);
bool	check_characters(char **map, t_data *data);
bool	check_file_type(char *path, char *format);
void	check_for_movement(t_data *data);
bool	check_int(char **comp, int *r, int *g, int *b);
bool	check_syntax(char *s);
void	clean_up(t_data *data);
char	*clean_value(char *line);
int		close_window(t_data *data);
void	compute_projection(t_data *data);
int		convert_color(char *s);
void	copy_row(char *r, char *s, int y, t_parse *parse);
void	draw_remaining_background(t_data *data, int x);
void	draw_wall_column(t_data *data, int x);
void	drawing_loop(t_draw *temp, t_data *data, int x);
int		engine(t_data *data);
bool	extract_colors(t_parse *parse, t_data *data);
bool	extract_data(t_parse *parse, t_data *data);
bool	extract_paths(t_parse *parse);
void	free_data(t_data *data);
void	free_images(t_data *data);
void	free_isma_arr(t_data *data);
void	free_minimap(t_data *data);
bool	get_data(char **file, t_data *data, t_parse *parse);
void	get_dir_vector(char face, t_ray *ray);
bool	get_element(char *line, t_parse *parse, int nc);
t_oimg	*get_img_ptr(char *path, void *mlx);
bool	get_isma_animation(t_txtr *tx, t_oimg *isma_arr, void *xdis);
t_oimg	*get_texture(t_data *data);
t_oimg	*get_texture_meme(t_data *data);
int		get_texture_x_coordinate(t_draw *temp, t_data *data);
bool	get_vector(t_parse *parse, t_ray *ray);
void	hand_animation(t_data *data, t_ray *ray, t_vctr *new_pos);
void	hand_open_door(t_data *data);
int		handle_key_press(int keycode, t_data *data);
int		handle_key_release(int keycode, t_data *data);
bool	incased(char **map, t_data *data, t_parse *parse);
bool	init_mlx_data(t_data *data);
bool	invalid_char(char *s, t_data *data);
bool	is_empty(char *str);
bool	is_int(char *s);
bool	is_valid(t_vctr *pos, t_data *data);
void	key_rotate(t_ray *ray, double rot);
int		main(int ac, char **av);
void	map_rendering(t_data *data, t_txtr *txtr);
int		mouse_move(int x, int y, t_data *data);
void	move(t_ray *ray, int keycode);
bool	multiple_start(char c);
void	my_pixel_put(int x, int y, t_data *data, int color);
char	**normalize_map(char **map, t_data *data, t_parse *parse);
void	open_door(t_data *data, t_ray *ray, char **map);
bool	parse_line(char *line, t_parse *parse, int line_n);
bool	parse_map(char **map, t_data *data, t_parse *parse);
bool	parse_textures(t_txtr *tx, t_parse *parse, void *xdis);
bool	parsing(t_data *data, int ac, char **av);
void	pause_game(t_data *data);
void	perform_dda(t_data *data, t_ray *ray);
void	prepare_ray(t_ray *ray, int x);
void	prepare_steps(t_ray *ray);
void	print_commands(t_data *data, int menu_x);
void	print_data(t_data *data, t_parse *parse);
void	print_fps(t_data *data, int menu_x);
void	print_menu(t_data *data);
void	print_move_speed(t_data *data, int menu_x);
void	put_image_to_image(t_data *data, t_oimg *in, int x, int y);
char	**read_file(char *path);
void	render_map(t_data *data, t_oimg *player, t_txtr *txtr);
bool	render_outside(t_data *data, t_ray *ray, int *rendered);
void	reset(t_ray *ray);
bool	safe_open(char *path, int *fd);
void	set_background(t_data *data);
void	set_new_pos_x(t_data *data, t_vctr *new_pos, t_ray *ray, int keycode);
void	set_new_pos_y(t_data *data, t_vctr *new_pos, t_ray *ray, int keycode);
void	take_step(t_ray *ray);
t_oimg	*wall_animation(t_txtr *txtr, int n_img, int ipf);