## 🧱 Cos’è il Raycasting (concettualmente)

Immagina di essere al centro di una griglia. Guardando avanti, lanci dei **raggi (ray)** per ogni colonna dello schermo, in modo da sapere **dove colpiscono un muro nella mappa**. In base a quanto il muro è lontano, disegni una colonna più alta o più bassa.

---

## 🔍 1. **Definizione dei Vettori Iniziali**

```c
double posX = 22.0, posY = 12.0;  // posizione del giocatore
double dirX = -1.0, dirY = 0.0;   // direzione dello sguardo
double planeX = 0.0, planeY = 0.66; // piano della camera
```

### 🔹 Spiegazione

* `dirX/dirY`: il **verso** in cui stai guardando (come una freccia)
* `planeX/planeY`: un vettore **perpendicolare** alla direzione, che definisce **l’ampiezza del campo visivo (FOV)**. Di solito ≈ 66° → valore `0.66`

---

## 🎯 2. **Calcolo della Direzione del Raggio per Ogni Colonna**

```c
double cameraX = 2 * x / (double)screenWidth - 1;
double rayDirX = dirX + planeX * cameraX;
double rayDirY = dirY + planeY * cameraX;
```

### 🔹 Spiegazione

* `x`: colonna dello schermo (0 fino a screenWidth-1)
* `cameraX`: varia da -1 (sinistra dello schermo) a +1 (destra)
* `rayDir`: direzione del singolo raggio, ottenuta **spostandosi lateralmente nel piano** visivo

📌 **Visualizzazione**:
Immagina un triangolo. `dir` è il lato centrale, `plane` è la base del campo visivo. Per ogni `x`, crei un `rayDir` inclinato, così:

```
          \
           \ rayDir
            \
dir ---> *----->  (giocatore)
            /
           / rayDir
```

---

## 🧩 3. **Coordinate della cella della griglia in cui sei**

```c
int mapX = (int)posX;
int mapY = (int)posY;
```

* Arrotondi la posizione del giocatore alla cella della mappa (es. 22.0 → 22)
* La mappa è una griglia 2D (es. `char **map`) dove ogni cella è larga 1 unità

---

## ⏱ 4. **Distanze tra le linee della griglia — deltaDistX/Y**

```c
double deltaDistX = (rayDirX == 0) ? INFINITY : fabs(1 / rayDirX);
double deltaDistY = (rayDirY == 0) ? INFINITY : fabs(1 / rayDirY);
```

### 🔹 Spiegazione

* `deltaDistX`: quanto devi muoverti lungo X per attraversare una **linea verticale** della griglia
* `deltaDistY`: quanto devi muoverti lungo Y per attraversare una **linea orizzontale**

📐 È derivato dal **Teorema di Pitagora**:
Se il raggio ha una direzione `(rayDirX, rayDirY)`, allora:

```
deltaDistX = √(1² + (rayDirY / rayDirX)²)
           = |1 / rayDirX|   (perché 1 unità in X)
```

---

## ➕ 5. **Primo impatto con una linea — sideDistX/Y**

```c
if (rayDirX < 0) {
    stepX = -1;
    sideDistX = (posX - mapX) * deltaDistX;
} else {
    stepX = 1;
    sideDistX = (mapX + 1.0 - posX) * deltaDistX;
}
```

### 🔹 Spiegazione

* `stepX`: direzione in cui ti muovi nella griglia (`+1` se vai verso destra, `-1` se vai verso sinistra)
* `sideDistX`: quanto manca per **colpire la prossima linea verticale**

📐 Esempio:
Se sei a `posX = 22.3`:

* per raggiungere la prossima linea di griglia (cioè 23), mancano `0.7` unità
* quindi: `sideDistX = 0.7 * deltaDistX`

---

## 🔁 6. **Loop DDA — Avanzamento nella Griglia**

```c
while (hit == 0) {
    if (sideDistX < sideDistY) {
        sideDistX += deltaDistX;
        mapX += stepX;
        side = 0;
    } else {
        sideDistY += deltaDistY;
        mapY += stepY;
        side = 1;
    }
    if (map[mapX][mapY] == '1') hit = 1;
}
```

### 🔹 Spiegazione

* Scegli quale lato della griglia è più vicino (`X` o `Y`)
* Aumenti la distanza (`sideDistX` o `sideDistY`) e ti sposti nella mappa (`mapX`, `mapY`)
* Quando trovi un muro (`'1'`), esci dal ciclo

📌 È come avanzare nella griglia a passi finché colpisci un ostacolo.

---

## 📏 7. **Calcolo della Distanza al Muro**

```c
if (side == 0)
    perpWallDist = (mapX - posX + (1 - stepX) / 2) / rayDirX;
else
    perpWallDist = (mapY - posY + (1 - stepY) / 2) / rayDirY;
```

### 🔹 Spiegazione

* `perpWallDist`: la distanza **perpendicolare** tra giocatore e muro, corretta per evitare **fish-eye**
* `(1 - stepX)/2`: serve a centrare il calcolo sulla **parete del blocco** colpito, non sul suo lato sinistro

💡 Importante perché senza correzione, i muri apparirebbero curvi

---

## 🖼 8. **Proiezione sullo Schermo**

```c
int lineHeight = (int)(screenHeight / perpWallDist);
int drawStart = -lineHeight / 2 + screenHeight / 2;
int drawEnd = lineHeight / 2 + screenHeight / 2;
```

### 🔹 Spiegazione

* Più un muro è **lontano**, più la sua altezza **è piccola**
* `drawStart` e `drawEnd` definiscono **dove** disegnare la colonna di muro

📐 Se `perpWallDist = 1.0`, `lineHeight = screenHeight`
Se `perpWallDist = 2.0`, `lineHeight = screenHeight / 2` → più lontano → più piccolo

---

## 🎨 9. **Colore del Muro (facoltativo)**

```c
if (side == 1) color = color / 2;
```

* Ombreggia i muri colpiti da lato Y (orizzontale) per un effetto realistico di profondità

---

## 🔁 10. **Rotazione del Giocatore**

```c
// ruota a sinistra
double oldDirX = dirX;
dirX = dirX * cos(rotSpeed) - dirY * sin(rotSpeed);
dirY = oldDirX * sin(rotSpeed) + dirY * cos(rotSpeed);

double oldPlaneX = planeX;
planeX = planeX * cos(rotSpeed) - planeY * sin(rotSpeed);
planeY = oldPlaneX * sin(rotSpeed) + planeY * cos(rotSpeed);
```

### 🔹 Spiegazione

* È la **rotazione 2D** classica: moltiplichi per una matrice di rotazione
* `rotSpeed` è l’angolo (in radianti) di quanto ruotare per frame

---

## 📌 Riepilogo delle Formule

| Passaggio        | Formula principale                         | Spiegazione                        |
| ---------------- | ------------------------------------------ | ---------------------------------- |
| Direzione raggio | `rayDir = dir + plane * cameraX`           | Proietta il raggio sulla colonna x |
| Distanza X       | `deltaDistX = fabs(1 / rayDirX)`           | Quanto dista la prossima linea X   |
| DDA Loop         | `sideDist += deltaDist`                    | Avanza fino al muro                |
| Distanza muro    | `perpWallDist = ...`                       | Distanza vera al muro              |
| Altezza muro     | `lineHeight = screenHeight / perpWallDist` | Proiezione 3D                      |
| Rotazione        | `vec' = rotMat * vec`                      | Ruota direzione e campo visivo     |

---

## 🧭 Punto di partenza – Visione da sviluppatore

Il progetto **cub3D** ha due grandi componenti:

1. **Parsing e logica di gioco**
2. **Motore di rendering (engine)**

Poiché ti interessa **l’engine**, devi **simulare mentalmente** e poi **strutturare il flusso logico** che seguirà ogni frame. Ma prima, ecco come ti consiglio di impostare il lavoro:

---

## 🎯 **1. Capire lo scopo minimo del progetto**

Tu vuoi (nella parte obbligatoria):

* Leggere una mappa `.cub`
* Posizionare il giocatore
* Mostrare un labirinto dal suo punto di vista
* Farlo muovere (WASD) e ruotare (← →)
* Mostrare i muri con texture differenti (NO, SO, EA, WE)

Quindi, **prima ancora del rendering**, serve:

* **una struttura dati per la mappa**
* **la posizione e direzione del giocatore**
* **un ciclo che, per ogni colonna dello schermo, calcola la distanza e disegna la scena**

---

## 🧠 **2. Organizzazione mentale dei moduli**

### **a. Mappa e parser**

> Cosa fa: legge il file `.cub`, crea la mappa, imposta texture, colori, posizione iniziale

* Qual è la dimensione della mappa?
* Dove si trova il giocatore?
* Quali texture sono caricate?

🎯 Obiettivo: ottenere una struttura come

```
struct Map {
  char **grid;
  int width, height;
  Vector2D player_pos;
  Vector2D player_dir;
  Vector2D camera_plane;
}
```

---

### **b. Ciclo principale ("Game Loop")**

> Cosa fa: ad ogni frame → legge input, aggiorna stato, esegue raycasting, disegna

* Input: muovi, ruota
* Raycasting: per ogni colonna, calcola cosa si vede
* Rendering: disegna le colonne

🎯 Mentalmente:

```
loop {
  handle_input();
  render_frame();
}
```

---

### **c. Engine — Raycasting**

> Cosa fa: lancia un raggio per ogni colonna dello schermo, scopre dove colpisce un muro

Questo è **il cuore**. Mentalmente:

```
Per ogni colonna x:
  Calcola rayDir
  Calcola step, deltaDist
  Esegui DDA fino a muro
  Calcola distanza reale
  Calcola altezza da disegnare
  Disegna colonna
```

🎯 L’obiettivo è: una funzione `cast_ray(x_colonna)` che ritorna altezza e texture da disegnare

---

### **d. Gestione input**

> Cosa fa: legge i tasti (WASD, ← →) e aggiorna la posizione e la direzione del player

* Muoversi in avanti/indietro: aggiorni `posX` e `posY` in direzione `dirX`, `dirY`
* Ruotare: aggiorni `dir` e `plane` usando una matrice di rotazione

🎯 Mentalmente:

```
if (W) pos += dir * moveSpeed
if (S) pos -= dir * moveSpeed
if (←) ruota a sinistra
if (→) ruota a destra
```

---

## 🗂 **3. Ordine mentale di implementazione**

### 🟢 **Fase 1 – Setup**

* Leggi la mappa `.cub`
* Stampa la mappa a terminale per debug
* Tieni traccia di player e direzione

### 🟢 **Fase 2 – Inizializzazione della finestra (MinilibX)**

* Crea la finestra
* Riempila di un colore (pavimento/soffitto)
* Mostra solo qualcosa per capire che funziona

### 🟢 **Fase 3 – Raycasting statico**

* Posizione fissa → disegna pareti (senza muovere)
* Calcola rayDir, DDA, distanze
* Visualizza colonne di colore diverso per ogni lato

### 🟢 **Fase 4 – Aggiunta del movimento**

* Leggi i tasti
* Muovi posizione o ruota direzione
* Il mondo comincia a sembrare vivo

### 🟢 **Fase 5 – Texture e dettagli**

* Aggiungi le texture ai muri
* Gestisci i colori di pavimento e soffitto
* Rispetta le regole del file `.cub`

---

## 🔚 In sintesi: **da dove partire**

1. **Capisci bene come rappresentare la mappa in memoria**
2. **Imposta il player: posizione, direzione, camera plane**
3. **Struttura il ciclo del raycasting a livello logico**
4. **Decidi come far girare il gioco: input → engine → render**

Perfetto! Andiamo a progettare:

---

## 🧠 **Obiettivo**

Costruire una **base di progetto ordinata** per `cub3D`, con:

* Strutture dati pensate per essere modulari
* Suddivisione dei file e funzioni per rispettare la **Norme 42**
* Tutto **senza scrivere codice**, ma descrivendo cosa fa ogni parte

---

## 📦 **Strutture Dati — Descrizione dei blocchi principali**

### 🔹 `t_vector`

* rappresenta un punto o direzione nel piano (es. `dirX`, `dirY`)
* contiene: `x`, `y` (float o double)

---

### 🔹 `t_player`

Contiene tutto ciò che serve al **giocatore**:

* `pos`: posizione attuale
* `dir`: direzione in cui guarda
* `plane`: camera plane (per campo visivo)
* `move_speed`, `rot_speed`: velocità

---

### 🔹 `t_map`

Contiene:

* `width`, `height`: dimensioni
* `grid`: matrice 2D della mappa (`char **`)
* `floor_color`, `ceiling_color`: colori
* percorsi texture per NO, SO, EA, WE

---

### 🔹 `t_ray`

Struttura temporanea usata durante il raycasting di una colonna:

* `ray_dir`, `delta_dist`, `side_dist`
* `mapX`, `mapY`: coordinate nella mappa
* `stepX`, `stepY`
* `side`: quale lato del muro è stato colpito
* `wall_dist`: distanza finale

---

### 🔹 `t_img`

Contiene le immagini/texture:

* puntatore a immagine MiniLibX
* altezza/larghezza
* buffer pixel

---

### 🔹 `t_game`

Contiene **tutto il gioco**:

* `mlx`, `win`: handler MiniLibX
* `t_player`, `t_map`
* array texture (NO/SO/EA/WE)
* `screen_width`, `screen_height`
* `keys`: stato dei tasti (W, A, S, D, ←, →)

---

## 🗂️ **Organizzazione dei File**

Per restare dentro i limiti della Norme 42 (max 5 funzioni/file, 25 righe max per funzione), suddividiamo così:

---

### 📁 `src/`

#### 🧩 `main.c`

* `main_loop()` → ciclo principale
* `init_game()` → inizializza le strutture
* `exit_game()` → libera memoria

---

#### 🧩 `input.c`

* `key_press()` → aggiorna stato dei tasti
* `key_release()`
* `handle_input()` → esegue movimento
* `rotate_player()` → aggiorna angoli
* `move_player()` → aggiorna posizione

---

#### 🧩 `parser.c`

* `parse_file()` → legge e valida file `.cub`
* `parse_textures()`
* `parse_colors()`
* `parse_map()`
* `set_player_start()`

---

#### 🧩 `raycast.c`

* `render_frame()` → chiama raycasting per ogni colonna
* `cast_single_ray()` → tutto il ciclo DDA
* `compute_projection()` → calcola altezza
* `get_wall_texture()` → seleziona la texture giusta
* `draw_column()` → disegna la colonna sullo schermo

---

#### 🧩 `draw.c`

* `init_textures()`
* `draw_minimap()` (se bonus)
* `put_pixel()` → disegno base
* `clear_image()`
* `render_image()` → invia immagine finale alla finestra

---

#### 🧩 `utils.c`

* `error_exit()`
* `free_all()`
* `validate_map()`
* `is_valid_char()`
* `get_rgb()`

---

## 🧱 **Schema a Blocchi – Flusso**

```text
[main] → init_game()
        ↓
   parse_file() 
        ↓
   loop {
     handle_input()
     render_frame()
     mlx_put_image_to_window()
   }
        ↓
  exit_game()
```

---

## 📋 Funzioni principali per file

| File        | Funzioni principali                         |
| ----------- | ------------------------------------------- |
| `main.c`    | init\_game, main\_loop, exit\_game          |
| `input.c`   | key\_press, key\_release, move, rotate      |
| `parser.c`  | parse\_file, parse\_map, parse\_colors      |
| `raycast.c` | render\_frame, cast\_ray, get\_projection   |
| `draw.c`    | draw\_column, init\_textures, render\_image |
| `utils.c`   | error\_exit, free\_all, validate\_map       |

---

## 🧠 Schema Strutture

## 🔹 `t_vector`

> **Scopo**: rappresenta una posizione o direzione nello spazio 2D

| Variabile | Tipo     | Utilità      |
| --------- | -------- | ------------ |
| `x`       | `double` | Coordinata X |
| `y`       | `double` | Coordinata Y |

📌 *Usato per: posizione del player, direzione, rayDir, plane, ecc.*

---

## 🔹 `t_player`

> **Scopo**: mantiene tutto ciò che riguarda il giocatore

| Variabile    | Tipo       | Utilità                                     |
| ------------ | ---------- | ------------------------------------------- |
| `pos`        | `t_vector` | Posizione attuale del giocatore sulla mappa |
| `dir`        | `t_vector` | Direzione in cui guarda                     |
| `plane`      | `t_vector` | Piano per il campo visivo (FOV)             |
| `move_speed` | `double`   | Velocità di movimento                       |
| `rot_speed`  | `double`   | Velocità di rotazione (← →)                 |

---

## 🔹 `t_map`

> **Scopo**: rappresenta la mappa e i dati del file `.cub`

| Variabile         | Tipo      | Utilità                        |
| ----------------- | --------- | ------------------------------ |
| `width`, `height` | `int`     | Dimensioni della mappa         |
| `grid`            | `char **` | Mappa 2D letta dal file `.cub` |
| `floor_color`     | `int`     | Colore RGB del pavimento       |
| `ceiling_color`   | `int`     | Colore RGB del soffitto        |
| `texture_no`      | `char *`  | Path texture Nord              |
| `texture_so`      | `char *`  | Path texture Sud               |
| `texture_ea`      | `char *`  | Path texture Est               |
| `texture_we`      | `char *`  | Path texture Ovest             |

---

## 🔹 `t_ray`

> **Scopo**: struttura temporanea per il calcolo del raycasting per una singola colonna

| Variabile        | Tipo       | Utilità                                                          |
| ---------------- | ---------- | ---------------------------------------------------------------- |
| `ray_dir`        | `t_vector` | Direzione del raggio                                             |
| `map_x`, `map_y` | `int`      | Coordinata della cella attualmente colpita nella mappa           |
| `delta_dist`     | `t_vector` | Distanza da percorrere per passare da una griglia all'altra      |
| `side_dist`      | `t_vector` | Distanza iniziale da percorrere per il primo impatto con un lato |
| `step_x`         | `int`      | Direzione (+1 o -1) per l'avanzamento su X                       |
| `step_y`         | `int`      | Direzione (+1 o -1) per l'avanzamento su Y                       |
| `side`           | `int`      | Indica se il muro colpito è su un lato X (0) o Y (1)             |
| `perp_dist`      | `double`   | Distanza corretta tra player e muro                              |

---

## 🔹 `t_img`

> **Scopo**: rappresenta una texture o una immagine da disegnare

| Variabile  | Tipo     | Utilità                                               |
| ---------- | -------- | ----------------------------------------------------- |
| `img_ptr`  | `void *` | Puntatore all'immagine MiniLibX                       |
| `addr`     | `char *` | Accesso diretto ai pixel dell’immagine                |
| `width`    | `int`    | Larghezza immagine                                    |
| `height`   | `int`    | Altezza immagine                                      |
| `bpp`      | `int`    | Bit per pixel                                         |
| `line_len` | `int`    | Byte per riga dell’immagine                           |
| `endian`   | `int`    | Endianness (utile per leggere i colori correttamente) |

---

## 🔹 `t_keys`

> **Scopo**: tiene traccia dei tasti premuti per input continuo

| Variabile          | Tipo  | Utilità                         |
| ------------------ | ----- | ------------------------------- |
| `w`, `a`, `s`, `d` | `int` | Stato dei tasti di movimento    |
| `left`, `right`    | `int` | Stato delle frecce di rotazione |

---

## 🔹 `t_game`

> **Scopo**: struttura principale — contiene tutto

| Variabile     | Tipo       | Utilità                                   |
| ------------- | ---------- | ----------------------------------------- |
| `mlx_ptr`     | `void *`   | Puntatore MiniLibX                        |
| `win_ptr`     | `void *`   | Finestra MiniLibX                         |
| `screen_w`    | `int`      | Larghezza dello schermo                   |
| `screen_h`    | `int`      | Altezza dello schermo                     |
| `player`      | `t_player` | Stato del giocatore                       |
| `map`         | `t_map`    | Mappa e dati di configurazione            |
| `img`         | `t_img`    | Immagine principale da disegnare          |
| `textures[4]` | `t_img[]`  | Le 4 texture direzionali (NO, SO, WE, EA) |
| `keys`        | `t_keys`   | Stato dei tasti                           |

---

## 🧠 Strutture Interdipendenti

* `t_game` **contiene tutto**, e viene passato a quasi tutte le funzioni.
* `t_ray` viene **usato solo nel rendering**, ogni frame.
* `t_img` viene usato per **renderizzare texture o lo screen buffer**.
* `t_player` e `t_map` vivono per tutta la durata del gioco.

---

## ✅ **Quando usare `int` (giusto e consigliato):**

### Nella struttura `t_ray`, queste variabili **devono essere `int`**:

| Variabile  | Tipo  | Perché va bene usare `int`                                                                              |
| ---------- | ----- | ------------------------------------------------------------------------------------------------------- |
| `map_x/y`  | `int` | Sono **coordinate di cella** sulla griglia (mappa 2D), che è indicizzata interamente con numeri interi. |
| `step_x/y` | `int` | Prendono **solo 2 valori**: `+1` o `-1`. Rappresentano **direzione di avanzamento** nella griglia.      |
| `side`     | `int` | Indica solo `0` (X) o `1` (Y), è una **scelta logica** binaria.                                         |

👉 Queste variabili **non richiedono precisione decimale** perché rappresentano *unità discrete*, non posizioni o direzioni continue.

---

## ✅ **Quando usare `double` (necessario):**

| Variabile                    | Perché `double`                                                |
| ---------------------------- | -------------------------------------------------------------- |
| `ray_dir.x/y`                | Direzione precisa del raggio in coordinate reali               |
| `delta_dist.x/y`             | Distanza fra linee di griglia → può essere frazionaria         |
| `side_dist.x/y`              | Distanza percorsa per colpire un bordo → decimale              |
| `perp_wall_dist`             | Distanza finale al muro → deve essere precisa per il rendering |
| `player.pos`, `dir`, `plane` | Posizioni e vettori in uno spazio continuo 2D                  |

---

## 🧠 Metafora semplice:

* `int` = ti dice **in quale stanza** ti trovi
* `double` = ti dice **dove esattamente sei dentro la stanza**

---

## ✅ In conclusione:

Mantieni questo principio:

> **Usa `int` per cose che si contano (celle, passi, direzioni), `double` per tutto ciò che misura spazi o distanze.**

Quindi:

* `step_x/y`: **int**
* `map_x/y`: **int**
* `delta_dist`, `side_dist`, `perp_wall_dist`: **double**

Se vuoi ti posso preparare uno schema strutturato solo delle variabili della `t_ray` suddiviso per tipo e funzione. Fammi sapere!
